properties([
  parameters([
    // Default parameters
    string(name: 'BUILD_NAME', defaultValue: '', description: 'Used for the display name of the Jenkins build', ),
    string(name: 'BUILD_REF', defaultValue: '', description: 'Build reference (for third party software)'),
    string(name: 'GIT_CLONE_BRANCH', defaultValue: 'master', description: 'The branch to build', ),
    string(name: 'GIT_CLONE_URL', defaultValue: '', description: 'Full URL of the git repo (ex: git@github.com/foo/bar.git)', ),
    string(name: 'GIT_CREDENTIALS_ID', defaultValue: '', description: 'Git credentials id', ),
    string(name: 'WHARF_PROJECT_ID', defaultValue: '', description: 'Number in Wharf DB that identifies a project'),
    string(name: 'WHARF_INSTANCE', defaultValue: '', description: 'Identifies Wharf instance that started the build (e.g. stage)'),
    // kube-deploy specific parameters
    text(name: 'KUBE_RESOURCE', defaultValue: '', description: 'Resource as YAML-text', ),
    booleanParam(name: 'KUBE_FORCE', defaultValue: false, description: 'Apply the --force flag to the kubectl call?'),
    string(name: 'KUBE_NAMESPACE', defaultValue: '', description: 'Namespace to deploy to (or none to use from resource metadata)'),
    string(name: 'KUBE_ACTION', defaultValue: 'apply', description: 'Kubectl action (create,apply,patch,delete etc.)'),
    string(name: 'CONFIGMAP_NAME', defaultValue: 'kubectl-config', description: 'Name of config-map in kubernetes to use as kubectl-config'),
  ])
])

def label = "kubectl-${UUID.randomUUID().toString()}"

podTemplate(name: 'kubectl', label: label, yaml: """
kind: Pod
metadata:
  name: kaniko
spec:
  nodeSelector:
    kubernetes.io/os: linux
  containers:
  - name: kubectl
    image: wharfse/kubectl:v1.18.2
    imagePullPolicy: IfNotPresent
    command:
    - /bin/sh
    tty: true
    volumeMounts:
      - name: kubectl-config-volume
        mountPath: /root/.kube
  volumes:
    - name: kubectl-config-volume
      configMap:
        name: ${params.CONFIGMAP_NAME}
"""
  ) {
  logstash {
    node(label) {
      currentBuild.displayName = "${params.BUILD_NAME} ${params.KUBE_ACTION}"

      stage("Deploy code") {
        def namespace = ""
        if(params.KUBE_NAMESPACE != '') {
          namespace = "-n ${params.KUBE_NAMESPACE}"
        }

        def force = ""
        if(params.KUBE_FORCE) {
          force = "--force"
        }

        if(params.KUBE_RESOURCE != '') {
          container(name: 'kubectl', shell: '/bin/bash') {
            sh """#!/bin/bash
IFS='' read -r -d '' String <<"EOF"
${params.KUBE_RESOURCE}
EOF

echo "\${String}" > values.yml
echo "Applying YAML:"
echo
cat values.yml
echo

echo '\$' kubectl ${params.KUBE_ACTION} ${namespace} -f values.yml ${force}
kubectl ${params.KUBE_ACTION} ${namespace} -f values.yml ${force}
            """
          }
        }
      }
    }
  }
}
